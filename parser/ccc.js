ccc.Parser = (function() {
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      function stringEscape(s) {
        function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

        return s
          .replace(/\\/g,   '\\\\')
          .replace(/"/g,    '\\"')
          .replace(/\x08/g, '\\b')
          .replace(/\t/g,   '\\t')
          .replace(/\n/g,   '\\n')
          .replace(/\f/g,   '\\f')
          .replace(/\r/g,   '\\r')
          .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
          .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
          .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
          .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
      }

      var expectedDesc, foundDesc;

      switch (expected.length) {
        case 0:
          expectedDesc = "end of input";
          break;

        case 1:
          expectedDesc = expected[0];
          break;

        default:
          expectedDesc = expected.slice(0, -1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }

      foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

      return "Expected " + expectedDesc + " but " + foundDesc + " found.";
    }

    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
    this.message  = buildMessage(expected, found);
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$startRuleFunctions = { start: peg$parsestart, datum: peg$parsedatum },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = null,
        peg$c1 = function(p) { return p; },
        peg$c2 = /^[ \t\f\r\n\x0B\xA0\u2000-\u200B\u2028\u2029\u202F\u3000]/,
        peg$c3 = "[ \\t\\f\\r\\n\\x0B\\xA0\\u2000-\\u200B\\u2028\\u2029\\u202F\\u3000]",
        peg$c4 = [],
        peg$c5 = function() { return ''; },
        peg$c6 = "",
        peg$c7 = /^[ "\t\f\r\n();[\]|]/,
        peg$c8 = "[ \"\\t\\f\\r\\n();[\\]|]",
        peg$c9 = "any character",
        peg$c10 = ";",
        peg$c11 = "\";\"",
        peg$c12 = /^[^\n\r]/,
        peg$c13 = "[^\\n\\r]",
        peg$c14 = /^[\n\r]/,
        peg$c15 = "[\\n\\r]",
        peg$c16 = "#;",
        peg$c17 = "\"#;\"",
        peg$c18 = function(i, j) {
            return new ccc.Symbol(i + j.join(""));
          },
        peg$c19 = function(i) {
            return new ccc.Symbol(i);
          },
        peg$c20 = /^[!@$%&*\/:<=>?\^_~a-z0-9]/i,
        peg$c21 = "[!@$%&*\\/:<=>?\\^_~a-z0-9]i",
        peg$c22 = /^[\x80-\uFFFF]/,
        peg$c23 = "[\\x80-\\uFFFF]",
        peg$c24 = function(c) { return c; },
        peg$c25 = /^[0-9]/,
        peg$c26 = "[0-9]",
        peg$c27 = /^[0-9a-f]/i,
        peg$c28 = "[0-9a-f]i",
        peg$c29 = "+",
        peg$c30 = "\"+\"",
        peg$c31 = "-",
        peg$c32 = "\"-\"",
        peg$c33 = ".",
        peg$c34 = "\".\"",
        peg$c35 = "@",
        peg$c36 = "\"@\"",
        peg$c37 = "...",
        peg$c38 = "\"...\"",
        peg$c39 = "#t",
        peg$c40 = "\"#t\"",
        peg$c41 = function() { return ccc.t; },
        peg$c42 = "#f",
        peg$c43 = "\"#f\"",
        peg$c44 = function() { return ccc.f; },
        peg$c45 = "#\\space",
        peg$c46 = "\"#\\\\space\"",
        peg$c47 = function() { return new ccc.Char(32); },
        peg$c48 = "#\\newline",
        peg$c49 = "\"#\\\\newline\"",
        peg$c50 = function() { return new ccc.Char(10); },
        peg$c51 = "#\\x",
        peg$c52 = "\"#\\\\x\"",
        peg$c53 = function(a, b) {
            return new ccc.Char(parseInt(a + b, 16));
          },
        peg$c54 = "#\\u",
        peg$c55 = "\"#\\\\u\"",
        peg$c56 = function(a, b, c, d) {
            return new ccc.Char(parseInt(a + b + c + d, 16));
          },
        peg$c57 = "#\\",
        peg$c58 = "\"#\\\\\"",
        peg$c59 = function(c) { return new ccc.Char(c.charCodeAt(0)); },
        peg$c60 = "\"",
        peg$c61 = "\"\\\"\"",
        peg$c62 = function(chars) {
            return new ccc.String(chars.join(""));
          },
        peg$c63 = "\\\\",
        peg$c64 = "\"\\\\\\\\\"",
        peg$c65 = function() { return "\\"; },
        peg$c66 = "\\n",
        peg$c67 = "\"\\\\n\"",
        peg$c68 = function() { return "\n"; },
        peg$c69 = "\\t",
        peg$c70 = "\"\\\\t\"",
        peg$c71 = function() { return "\t"; },
        peg$c72 = "\\f",
        peg$c73 = "\"\\\\f\"",
        peg$c74 = function() { return "\f"; },
        peg$c75 = "\\r",
        peg$c76 = "\"\\\\r\"",
        peg$c77 = function() { return "\r"; },
        peg$c78 = "\\'",
        peg$c79 = "\"\\\\'\"",
        peg$c80 = function() { return "'"; },
        peg$c81 = "\\\"",
        peg$c82 = "\"\\\\\\\"\"",
        peg$c83 = function() { return "\""; },
        peg$c84 = "\\x",
        peg$c85 = "\"\\\\x\"",
        peg$c86 = function(a, b) {
            return String.fromCharCode(parseInt(a + b, 16));
          },
        peg$c87 = "\\u",
        peg$c88 = "\"\\\\u\"",
        peg$c89 = function(a, b, c, d) {
            return String.fromCharCode(parseInt(a + b + c + d, 16));
          },
        peg$c90 = /^[^"\\]/,
        peg$c91 = "[^\"\\\\]",
        peg$c92 = "|",
        peg$c93 = "\"|\"",
        peg$c94 = function(chars) {
            return new ccc.Symbol(chars.join(""));
          },
        peg$c95 = /^[^|\\]/,
        peg$c96 = "[^|\\\\]",
        peg$c97 = "\\|",
        peg$c98 = "\"\\\\|\"",
        peg$c99 = function() { return "|"; },
        peg$c100 = "(",
        peg$c101 = "\"(\"",
        peg$c102 = ")",
        peg$c103 = "\")\"",
        peg$c104 = function() { return ccc.nil; },
        peg$c105 = "[",
        peg$c106 = "\"[\"",
        peg$c107 = "]",
        peg$c108 = "\"]\"",
        peg$c109 = "#?",
        peg$c110 = "\"#?\"",
        peg$c111 = function() { return ccc.unspecified; },
        peg$c112 = "#b",
        peg$c113 = "\"#b\"",
        peg$c114 = /^[\-+]/,
        peg$c115 = "[\\-+]",
        peg$c116 = /^[01]/,
        peg$c117 = "[01]",
        peg$c118 = function(sign, digits) {
            return new ccc.Number(parseInt(sign + digits.join(""), 2));
          },
        peg$c119 = "#o",
        peg$c120 = "\"#o\"",
        peg$c121 = /^[0-7]/,
        peg$c122 = "[0-7]",
        peg$c123 = function(sign, digits) {
            return new ccc.Number(parseInt(sign + digits.join(""), 8));
          },
        peg$c124 = "#x",
        peg$c125 = "\"#x\"",
        peg$c126 = function(sign, digits) {
            return new ccc.Number(parseInt(sign + digits.join(""), 16));
          },
        peg$c127 = /^[eE]/,
        peg$c128 = "[eE]",
        peg$c129 = function(e, s, d) { return e + s + d.join(""); },
        peg$c130 = "#d",
        peg$c131 = "\"#d\"",
        peg$c132 = function(sign, intPart, fracPart, suffix) {
            return new ccc.Number(parseFloat(sign + intPart.join("") + "." + fracPart.join("") + suffix));
          },
        peg$c133 = function(sign, digits, suffix) {
            return new ccc.Number(parseFloat(sign + digits.join("") + suffix));
          },
        peg$c134 = function(data) {
            return ccc.Pair.makeList.apply(null, data.map(function (e) { return e[0]; }));
          },
        peg$c135 = function(data, tail) {
            return ccc.Pair.makeImproperList(data.map(function (e) { return e[0]; }), tail);
          },
        peg$c136 = ",@",
        peg$c137 = "\",@\"",
        peg$c138 = function(datum) {
            return ccc.Pair.makeList(new ccc.Symbol('unquote-splicing'), datum);
          },
        peg$c139 = "'",
        peg$c140 = "\"'\"",
        peg$c141 = function(datum) {
            return ccc.Pair.makeList(new ccc.Symbol('quote'), datum);
          },
        peg$c142 = "`",
        peg$c143 = "\"`\"",
        peg$c144 = function(datum) {
            return ccc.Pair.makeList(new ccc.Symbol('quasiquote'), datum);
          },
        peg$c145 = ",",
        peg$c146 = "\",\"",
        peg$c147 = function(datum) {
            return ccc.Pair.makeList(new ccc.Symbol('unquote'), datum);
          },
        peg$c148 = "#(",
        peg$c149 = "\"#(\"",
        peg$c150 = function(elements) {
            return new ccc.Vector(elements.map(function(e) { return e[0]; }));
          },
        peg$c151 = "#[",
        peg$c152 = "\"#[\"",
        peg$c153 = function(data) {
            return data.map(function(e) { return e[0] });
          },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$cleanupExpected(expected) {
      var i = 0;

      expected.sort();

      while (i < expected.length) {
        if (expected[i - 1] === expected[i]) {
          expected.splice(i, 1);
        } else {
          i++;
        }
      }
    }

    function peg$parsestart() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== null) {
        s2 = peg$parseprogram();
        if (s2 !== null) {
          s3 = peg$parse__();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c1(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsespace() {
      var s0;

      if (peg$c2.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }

      return s0;
    }

    function peg$parsenothing() {
      var s0;

      s0 = peg$parsespace();
      if (s0 === null) {
        s0 = peg$parsecomment();
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsenothing();
      while (s2 !== null) {
        s1.push(s2);
        s2 = peg$parsenothing();
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c5();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseDL() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (peg$c7.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      peg$silentFails--;
      if (s2 !== null) {
        peg$currPos = s1;
        s1 = peg$c6;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== null) {
        s2 = peg$parse__();
        if (s2 !== null) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        peg$silentFails++;
        if (input.length > peg$currPos) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c9); }
        }
        peg$silentFails--;
        if (s1 === null) {
          s0 = peg$c6;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsecomment() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c10;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s1 !== null) {
        s2 = [];
        if (peg$c12.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        while (s3 !== null) {
          s2.push(s3);
          if (peg$c12.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c13); }
          }
        }
        if (s2 !== null) {
          if (peg$c14.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c15); }
          }
          if (s3 === null) {
            s3 = peg$c6;
          }
          if (s3 !== null) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c16) {
          s1 = peg$c16;
          peg$currPos += 2;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s1 !== null) {
          s2 = peg$parse__();
          if (s2 !== null) {
            s3 = peg$parsedatum();
            if (s3 !== null) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsesymbol() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseinitial();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parsesubsequent();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parsesubsequent();
        }
        if (s2 !== null) {
          s3 = peg$parseDL();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c18(s1,s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parsepeculiar_identifier();
        if (s1 !== null) {
          s2 = peg$parseDL();
          if (s2 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c19(s1);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === null) {
          s0 = peg$parsequoted_symbol();
        }
      }

      return s0;
    }

    function peg$parseinitial() {
      var s0, s1, s2;

      if (peg$c20.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        peg$silentFails++;
        s2 = peg$parsespace();
        peg$silentFails--;
        if (s2 === null) {
          s1 = peg$c6;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 !== null) {
          if (peg$c22.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
          if (s2 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c24(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsesubsequent() {
      var s0;

      s0 = peg$parseinitial();
      if (s0 === null) {
        s0 = peg$parsedigit();
        if (s0 === null) {
          s0 = peg$parsespecial_subsequent();
        }
      }

      return s0;
    }

    function peg$parsedigit() {
      var s0;

      if (peg$c25.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }

      return s0;
    }

    function peg$parsehexdigit() {
      var s0;

      if (peg$c27.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }

      return s0;
    }

    function peg$parsespecial_subsequent() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c29;
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }
      if (s0 === null) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s0 = peg$c31;
          peg$currPos++;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c32); }
        }
        if (s0 === null) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s0 = peg$c33;
            peg$currPos++;
          } else {
            s0 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s0 === null) {
            if (input.charCodeAt(peg$currPos) === 64) {
              s0 = peg$c35;
              peg$currPos++;
            } else {
              s0 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsepeculiar_identifier() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c29;
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }
      if (s0 === null) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s0 = peg$c31;
          peg$currPos++;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c32); }
        }
        if (s0 === null) {
          if (input.substr(peg$currPos, 3) === peg$c37) {
            s0 = peg$c37;
            peg$currPos += 3;
          } else {
            s0 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c38); }
          }
        }
      }

      return s0;
    }

    function peg$parseboolean() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c39) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }
      if (s1 !== null) {
        s2 = peg$parseDL();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c41();
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c42) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c43); }
        }
        if (s1 !== null) {
          s2 = peg$parseDL();
          if (s2 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c44();
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsecharacter() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c45) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c46); }
      }
      if (s1 !== null) {
        s2 = peg$parseDL();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c47();
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c48) {
          s1 = input.substr(peg$currPos, 9);
          peg$currPos += 9;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
        if (s1 !== null) {
          s2 = peg$parseDL();
          if (s2 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c50();
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c51) {
            s1 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s1 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c52); }
          }
          if (s1 !== null) {
            s2 = peg$parsehexdigit();
            if (s2 !== null) {
              s3 = peg$parsehexdigit();
              if (s3 !== null) {
                s4 = peg$parseDL();
                if (s4 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c53(s2,s3);
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === null) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c54) {
              s1 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s1 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c55); }
            }
            if (s1 !== null) {
              s2 = peg$parsehexdigit();
              if (s2 !== null) {
                s3 = peg$parsehexdigit();
                if (s3 !== null) {
                  s4 = peg$parsehexdigit();
                  if (s4 !== null) {
                    s5 = peg$parsehexdigit();
                    if (s5 !== null) {
                      s6 = peg$parseDL();
                      if (s6 !== null) {
                        peg$reportedPos = s0;
                        s1 = peg$c56(s2,s3,s4,s5);
                        if (s1 === null) {
                          peg$currPos = s0;
                          s0 = s1;
                        } else {
                          s0 = s1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === null) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c57) {
                s1 = peg$c57;
                peg$currPos += 2;
              } else {
                s1 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c58); }
              }
              if (s1 !== null) {
                if (input.length > peg$currPos) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c9); }
                }
                if (s2 !== null) {
                  s3 = peg$parseDL();
                  if (s3 !== null) {
                    peg$reportedPos = s0;
                    s1 = peg$c59(s2);
                    if (s1 === null) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c60;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parsestring_element();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parsestring_element();
        }
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c60;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c61); }
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c62(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseescape_sequence() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c63) {
        s1 = peg$c63;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c65();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c66) {
          s1 = peg$c66;
          peg$currPos += 2;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
        if (s1 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c68();
        }
        if (s1 === null) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c69) {
            s1 = peg$c69;
            peg$currPos += 2;
          } else {
            s1 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c70); }
          }
          if (s1 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c71();
          }
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
          if (s0 === null) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c72) {
              s1 = peg$c72;
              peg$currPos += 2;
            } else {
              s1 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c73); }
            }
            if (s1 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c74();
            }
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
            if (s0 === null) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c75) {
                s1 = peg$c75;
                peg$currPos += 2;
              } else {
                s1 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c76); }
              }
              if (s1 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c77();
              }
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
              if (s0 === null) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c78) {
                  s1 = peg$c78;
                  peg$currPos += 2;
                } else {
                  s1 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c79); }
                }
                if (s1 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c80();
                }
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
                if (s0 === null) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c81) {
                    s1 = peg$c81;
                    peg$currPos += 2;
                  } else {
                    s1 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c82); }
                  }
                  if (s1 !== null) {
                    peg$reportedPos = s0;
                    s1 = peg$c83();
                  }
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                  if (s0 === null) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c84) {
                      s1 = peg$c84;
                      peg$currPos += 2;
                    } else {
                      s1 = null;
                      if (peg$silentFails === 0) { peg$fail(peg$c85); }
                    }
                    if (s1 !== null) {
                      s2 = peg$parsehexdigit();
                      if (s2 !== null) {
                        s3 = peg$parsehexdigit();
                        if (s3 !== null) {
                          peg$reportedPos = s0;
                          s1 = peg$c86(s2,s3);
                          if (s1 === null) {
                            peg$currPos = s0;
                            s0 = s1;
                          } else {
                            s0 = s1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === null) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c87) {
                        s1 = peg$c87;
                        peg$currPos += 2;
                      } else {
                        s1 = null;
                        if (peg$silentFails === 0) { peg$fail(peg$c88); }
                      }
                      if (s1 !== null) {
                        s2 = peg$parsehexdigit();
                        if (s2 !== null) {
                          s3 = peg$parsehexdigit();
                          if (s3 !== null) {
                            s4 = peg$parsehexdigit();
                            if (s4 !== null) {
                              s5 = peg$parsehexdigit();
                              if (s5 !== null) {
                                peg$reportedPos = s0;
                                s1 = peg$c89(s2,s3,s4,s5);
                                if (s1 === null) {
                                  peg$currPos = s0;
                                  s0 = s1;
                                } else {
                                  s0 = s1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsestring_element() {
      var s0;

      if (peg$c90.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c91); }
      }
      if (s0 === null) {
        s0 = peg$parseescape_sequence();
      }

      return s0;
    }

    function peg$parsequoted_symbol() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 124) {
        s1 = peg$c92;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parsesymbol_element();
        if (s3 !== null) {
          while (s3 !== null) {
            s2.push(s3);
            s3 = peg$parsesymbol_element();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 124) {
            s3 = peg$c92;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c93); }
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c94(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesymbol_element() {
      var s0, s1;

      if (peg$c95.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c96); }
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c97) {
          s1 = peg$c97;
          peg$currPos += 2;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c98); }
        }
        if (s1 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c99();
        }
        if (s1 === null) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
        if (s0 === null) {
          s0 = peg$parseescape_sequence();
        }
      }

      return s0;
    }

    function peg$parsenull_value() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c100;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }
      if (s1 !== null) {
        s2 = peg$parse__();
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c102;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c103); }
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c104();
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c105;
          peg$currPos++;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c106); }
        }
        if (s1 !== null) {
          s2 = peg$parse__();
          if (s2 !== null) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s3 = peg$c107;
              peg$currPos++;
            } else {
              s3 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c108); }
            }
            if (s3 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c104();
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseunspecific() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c109) {
        s1 = peg$c109;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c110); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c111();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0;

      s0 = peg$parsenum_2();
      if (s0 === null) {
        s0 = peg$parsenum_8();
        if (s0 === null) {
          s0 = peg$parsenum_16();
          if (s0 === null) {
            s0 = peg$parsenum_10();
          }
        }
      }

      return s0;
    }

    function peg$parsenum_2() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c112) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c113); }
      }
      if (s1 !== null) {
        if (peg$c114.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c115); }
        }
        if (s2 === null) {
          s2 = peg$c6;
        }
        if (s2 !== null) {
          s3 = [];
          if (peg$c116.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c117); }
          }
          if (s4 !== null) {
            while (s4 !== null) {
              s3.push(s4);
              if (peg$c116.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c117); }
              }
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== null) {
            s4 = peg$parseDL();
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c118(s2,s3);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenum_8() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c119) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c120); }
      }
      if (s1 !== null) {
        if (peg$c114.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c115); }
        }
        if (s2 === null) {
          s2 = peg$c6;
        }
        if (s2 !== null) {
          s3 = [];
          if (peg$c121.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c122); }
          }
          if (s4 !== null) {
            while (s4 !== null) {
              s3.push(s4);
              if (peg$c121.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c122); }
              }
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== null) {
            s4 = peg$parseDL();
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c123(s2,s3);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenum_16() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c124) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c125); }
      }
      if (s1 !== null) {
        if (peg$c114.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c115); }
        }
        if (s2 === null) {
          s2 = peg$c6;
        }
        if (s2 !== null) {
          s3 = [];
          s4 = peg$parsehexdigit();
          if (s4 !== null) {
            while (s4 !== null) {
              s3.push(s4);
              s4 = peg$parsehexdigit();
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== null) {
            s4 = peg$parseDL();
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c126(s2,s3);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesuffix() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (peg$c127.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c128); }
      }
      if (s1 !== null) {
        if (peg$c114.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c115); }
        }
        if (s2 === null) {
          s2 = peg$c6;
        }
        if (s2 !== null) {
          s3 = [];
          s4 = peg$parsedigit();
          if (s4 !== null) {
            while (s4 !== null) {
              s3.push(s4);
              s4 = peg$parsedigit();
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c129(s1,s2,s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenum_10() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c130) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c131); }
      }
      if (s1 === null) {
        s1 = peg$c6;
      }
      if (s1 !== null) {
        if (peg$c114.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c115); }
        }
        if (s2 === null) {
          s2 = peg$c6;
        }
        if (s2 !== null) {
          s3 = [];
          s4 = peg$parsedigit();
          while (s4 !== null) {
            s3.push(s4);
            s4 = peg$parsedigit();
          }
          if (s3 !== null) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s4 = peg$c33;
              peg$currPos++;
            } else {
              s4 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c34); }
            }
            if (s4 !== null) {
              s5 = [];
              s6 = peg$parsedigit();
              if (s6 !== null) {
                while (s6 !== null) {
                  s5.push(s6);
                  s6 = peg$parsedigit();
                }
              } else {
                s5 = peg$c0;
              }
              if (s5 !== null) {
                s6 = peg$parsesuffix();
                if (s6 === null) {
                  s6 = peg$c6;
                }
                if (s6 !== null) {
                  s7 = peg$parseDL();
                  if (s7 !== null) {
                    peg$reportedPos = s0;
                    s1 = peg$c132(s2,s3,s5,s6);
                    if (s1 === null) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c130) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c131); }
        }
        if (s1 === null) {
          s1 = peg$c6;
        }
        if (s1 !== null) {
          if (peg$c114.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c115); }
          }
          if (s2 === null) {
            s2 = peg$c6;
          }
          if (s2 !== null) {
            s3 = [];
            s4 = peg$parsedigit();
            if (s4 !== null) {
              while (s4 !== null) {
                s3.push(s4);
                s4 = peg$parsedigit();
              }
            } else {
              s3 = peg$c0;
            }
            if (s3 !== null) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s4 = peg$c33;
                peg$currPos++;
              } else {
                s4 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c34); }
              }
              if (s4 !== null) {
                s5 = [];
                s6 = peg$parsedigit();
                while (s6 !== null) {
                  s5.push(s6);
                  s6 = peg$parsedigit();
                }
                if (s5 !== null) {
                  s6 = peg$parsesuffix();
                  if (s6 === null) {
                    s6 = peg$c6;
                  }
                  if (s6 !== null) {
                    s7 = peg$parseDL();
                    if (s7 !== null) {
                      peg$reportedPos = s0;
                      s1 = peg$c132(s2,s3,s5,s6);
                      if (s1 === null) {
                        peg$currPos = s0;
                        s0 = s1;
                      } else {
                        s0 = s1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c130) {
            s1 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s1 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c131); }
          }
          if (s1 === null) {
            s1 = peg$c6;
          }
          if (s1 !== null) {
            if (peg$c114.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c115); }
            }
            if (s2 === null) {
              s2 = peg$c6;
            }
            if (s2 !== null) {
              s3 = [];
              s4 = peg$parsedigit();
              if (s4 !== null) {
                while (s4 !== null) {
                  s3.push(s4);
                  s4 = peg$parsedigit();
                }
              } else {
                s3 = peg$c0;
              }
              if (s3 !== null) {
                s4 = peg$parsesuffix();
                if (s4 === null) {
                  s4 = peg$c6;
                }
                if (s4 !== null) {
                  s5 = peg$parseDL();
                  if (s5 !== null) {
                    peg$reportedPos = s0;
                    s1 = peg$c133(s2,s3,s4);
                    if (s1 === null) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsedatum() {
      var s0;

      s0 = peg$parsesimple_datum();
      if (s0 === null) {
        s0 = peg$parsecompound_datum();
      }

      return s0;
    }

    function peg$parsesimple_datum() {
      var s0;

      s0 = peg$parseboolean();
      if (s0 === null) {
        s0 = peg$parsenumber();
        if (s0 === null) {
          s0 = peg$parsecharacter();
          if (s0 === null) {
            s0 = peg$parsestring();
            if (s0 === null) {
              s0 = peg$parsesymbol();
              if (s0 === null) {
                s0 = peg$parsenull_value();
                if (s0 === null) {
                  s0 = peg$parseunspecific();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecompound_datum() {
      var s0;

      s0 = peg$parselist();
      if (s0 === null) {
        s0 = peg$parsevector();
      }

      return s0;
    }

    function peg$parselist() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c100;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }
      if (s1 !== null) {
        s2 = peg$parse__();
        if (s2 !== null) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsedatum();
          if (s5 !== null) {
            s6 = peg$parse__();
            if (s6 !== null) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== null) {
            while (s4 !== null) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = peg$parsedatum();
              if (s5 !== null) {
                s6 = peg$parse__();
                if (s6 !== null) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== null) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c102;
              peg$currPos++;
            } else {
              s4 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c103); }
            }
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c134(s3);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c100;
          peg$currPos++;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c101); }
        }
        if (s1 !== null) {
          s2 = peg$parse__();
          if (s2 !== null) {
            s3 = [];
            s4 = peg$currPos;
            s5 = peg$parsedatum();
            if (s5 !== null) {
              s6 = peg$parse__();
              if (s6 !== null) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 !== null) {
              while (s4 !== null) {
                s3.push(s4);
                s4 = peg$currPos;
                s5 = peg$parsedatum();
                if (s5 !== null) {
                  s6 = peg$parse__();
                  if (s6 !== null) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              }
            } else {
              s3 = peg$c0;
            }
            if (s3 !== null) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s4 = peg$c33;
                peg$currPos++;
              } else {
                s4 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c34); }
              }
              if (s4 !== null) {
                s5 = peg$parse__();
                if (s5 !== null) {
                  s6 = peg$parsedatum();
                  if (s6 !== null) {
                    s7 = peg$parse__();
                    if (s7 !== null) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s8 = peg$c102;
                        peg$currPos++;
                      } else {
                        s8 = null;
                        if (peg$silentFails === 0) { peg$fail(peg$c103); }
                      }
                      if (s8 !== null) {
                        peg$reportedPos = s0;
                        s1 = peg$c135(s3,s6);
                        if (s1 === null) {
                          peg$currPos = s0;
                          s0 = s1;
                        } else {
                          s0 = s1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c105;
            peg$currPos++;
          } else {
            s1 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c106); }
          }
          if (s1 !== null) {
            s2 = peg$parse__();
            if (s2 !== null) {
              s3 = [];
              s4 = peg$currPos;
              s5 = peg$parsedatum();
              if (s5 !== null) {
                s6 = peg$parse__();
                if (s6 !== null) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
              if (s4 !== null) {
                while (s4 !== null) {
                  s3.push(s4);
                  s4 = peg$currPos;
                  s5 = peg$parsedatum();
                  if (s5 !== null) {
                    s6 = peg$parse__();
                    if (s6 !== null) {
                      s5 = [s5, s6];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                }
              } else {
                s3 = peg$c0;
              }
              if (s3 !== null) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s4 = peg$c107;
                  peg$currPos++;
                } else {
                  s4 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c108); }
                }
                if (s4 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c134(s3);
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === null) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s1 = peg$c105;
              peg$currPos++;
            } else {
              s1 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c106); }
            }
            if (s1 !== null) {
              s2 = peg$parse__();
              if (s2 !== null) {
                s3 = [];
                s4 = peg$currPos;
                s5 = peg$parsedatum();
                if (s5 !== null) {
                  s6 = peg$parse__();
                  if (s6 !== null) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
                if (s4 !== null) {
                  while (s4 !== null) {
                    s3.push(s4);
                    s4 = peg$currPos;
                    s5 = peg$parsedatum();
                    if (s5 !== null) {
                      s6 = peg$parse__();
                      if (s6 !== null) {
                        s5 = [s5, s6];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  }
                } else {
                  s3 = peg$c0;
                }
                if (s3 !== null) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s4 = peg$c33;
                    peg$currPos++;
                  } else {
                    s4 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c34); }
                  }
                  if (s4 !== null) {
                    s5 = peg$parse__();
                    if (s5 !== null) {
                      s6 = peg$parsedatum();
                      if (s6 !== null) {
                        s7 = peg$parse__();
                        if (s7 !== null) {
                          if (input.charCodeAt(peg$currPos) === 93) {
                            s8 = peg$c107;
                            peg$currPos++;
                          } else {
                            s8 = null;
                            if (peg$silentFails === 0) { peg$fail(peg$c108); }
                          }
                          if (s8 !== null) {
                            peg$reportedPos = s0;
                            s1 = peg$c135(s3,s6);
                            if (s1 === null) {
                              peg$currPos = s0;
                              s0 = s1;
                            } else {
                              s0 = s1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === null) {
              s0 = peg$parseabbreviation();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseabbreviation() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c136) {
        s1 = peg$c136;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c137); }
      }
      if (s1 !== null) {
        s2 = peg$parse__();
        if (s2 !== null) {
          s3 = peg$parsedatum();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c138(s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s1 = peg$c139;
          peg$currPos++;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c140); }
        }
        if (s1 !== null) {
          s2 = peg$parse__();
          if (s2 !== null) {
            s3 = peg$parsedatum();
            if (s3 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c141(s3);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 96) {
            s1 = peg$c142;
            peg$currPos++;
          } else {
            s1 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c143); }
          }
          if (s1 !== null) {
            s2 = peg$parse__();
            if (s2 !== null) {
              s3 = peg$parsedatum();
              if (s3 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c144(s3);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === null) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s1 = peg$c145;
              peg$currPos++;
            } else {
              s1 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c146); }
            }
            if (s1 !== null) {
              s2 = peg$parse__();
              if (s2 !== null) {
                s3 = peg$parsedatum();
                if (s3 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c147(s3);
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsevector() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c148) {
        s1 = peg$c148;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c149); }
      }
      if (s1 !== null) {
        s2 = peg$parse__();
        if (s2 !== null) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsedatum();
          if (s5 !== null) {
            s6 = peg$parse__();
            if (s6 !== null) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== null) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsedatum();
            if (s5 !== null) {
              s6 = peg$parse__();
              if (s6 !== null) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== null) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c102;
              peg$currPos++;
            } else {
              s4 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c103); }
            }
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c150(s3);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c151) {
          s1 = peg$c151;
          peg$currPos += 2;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c152); }
        }
        if (s1 !== null) {
          s2 = peg$parse__();
          if (s2 !== null) {
            s3 = [];
            s4 = peg$currPos;
            s5 = peg$parsedatum();
            if (s5 !== null) {
              s6 = peg$parse__();
              if (s6 !== null) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            while (s4 !== null) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = peg$parsedatum();
              if (s5 !== null) {
                s6 = peg$parse__();
                if (s6 !== null) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s3 !== null) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s4 = peg$c107;
                peg$currPos++;
              } else {
                s4 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c108); }
              }
              if (s4 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c150(s3);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseprogram() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parsedatum();
      if (s3 !== null) {
        s4 = peg$parse__();
        if (s4 !== null) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      while (s2 !== null) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsedatum();
        if (s3 !== null) {
          s4 = peg$parse__();
          if (s4 !== null) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c153(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== null && peg$currPos === input.length) {
      return peg$result;
    } else {
      peg$cleanupExpected(peg$maxFailExpected);
      peg$reportedPos = Math.max(peg$currPos, peg$maxFailPos);

      throw new SyntaxError(
        peg$maxFailExpected,
        peg$reportedPos < input.length ? input.charAt(peg$reportedPos) : null,
        peg$reportedPos,
        peg$computePosDetails(peg$reportedPos).line,
        peg$computePosDetails(peg$reportedPos).column
      );
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse      : parse
  };
})();
